// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum CampaignStatus {
  PENDING
  INPROGRESS
  FINISHED
  CANCELED
}

enum MarketingOptions {
  SocialMediaPosts
  InPersonAppearances
}

enum Compensations {
  InKind
  FixedFee
  Commission
}

model StudentAthlete {
  // Basic information
  // TODO make sport, major, gender, ethnicity enums?
  name             String
  email            String   @unique
  image            String?
  age              Int
  sport            String
  major            String
  gender           String
  ethnicity        String
  introBlurb       String?

  // Social Media
  instagram        String?
  tiktok           String?
  pinterest        String?
  linkedIn         String?
  twitter          String?

  // Campaign preferences
  industries       String[]
  marketingOptions MarketingOptions[]
  hoursPerWeek     Int?
  compensation     Compensations[]

  // Metadata
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())

  // many-to-many relationship: a StudentAthlete can be part of multiple campaigns
  campaigns       Campaign[] @relation("StudentAthleteCampaign")
}

model Business {
  name             String
  email            String     @unique
  missionStatement String

  // Social Media
  instagram        String?
  tiktok           String?
  pinterest        String?
  linkedIn         String?
  twitter          String?
  website          String?

  // Metadata
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())

  // 1-to-many relationship: a single Business can have multiple Campaigns
  campaigns        Campaign[]
}

model Campaign {
  // Fields supplied by business
  name                String
  campaignSummary     String
  maxBudget           String
  compensation        Compensations
  studentAthleteCount Int
  sports              String[]
  startDate           DateTime
  endDate             DateTime

  // Fields generated by AI
  objectives         String
  targetAudience     String
  athleteIntegration String
  channels           String
  timeline           String
  budgetBreakdown    String
  creativeConcept    String
  metrics            String
  questions          String


  // Metadata
  id                  String   @id @default(uuid())
  status              String
  createdAt           DateTime @default(now())

  // 1-1 relationship: a Campaign can only belong to a single Business
  businessId          Int
  business            Business @relation(fields: [businessId], references: [id])

  // many-to-many relationship: a Campaign can have multiple StudentAthletes
  studentAthletes  StudentAthlete[] @relation("StudentAthleteCampaign")
}
