// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum CampaignStatus {
  PENDING
  INPROGRESS
  FINISHED
  CANCELED
}

enum MarketingOptions {
  SocialMediaPosts
  InPersonAppearances
}

enum Compensations {
  InKind
  FixedFee
  Commission
}

model StudentAthlete {
  // Basic information
  // TODO make sport, major, gender, ethnicity enums?
  name             String
  email            String   @unique
  image            String?
  age              Int
  sport            String
  major            String
  gender           String
  ethnicity        String
  introBlurb       String?

  // Social media
  instagram        String?
  instagramFollowers Int?
  tiktok           String?
  tiktokFollowers  Int?
  pinterest        String?
  pinterestFollowers Int?
  linkedIn         String?
  linkedInFollowers Int?
  twitter          String?
  twitterFollowers Int?

  // Campaign preferences
  industries       String[]
  marketingOptions MarketingOptions[]
  hoursPerWeek     Int?
  compensation     Compensations[]

  // Metadata
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())

  // many-to-many relationship: a StudentAthlete can be part of multiple campaigns
  campaigns       Campaign[] @relation("StudentAthleteCampaign")
}

model Business {
  // Fields supplied by business
  name             String
  email            String     @unique
  missionStatement String
  industry         String

  // Social media
  instagram        String?
  tiktok           String?
  pinterest        String?
  linkedIn         String?
  twitter          String?
  website          String?

  // Metadata
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())

  // 1-to-many relationship: a single Business can have multiple Campaigns
  campaigns        Campaign[]
}


// campaign objectives:
// Engagement & Community Building – Drive social media interactions, brand conversations, and fan engagement. (engagementGoal)
// Sales Growth & Conversions – Directly increase product sales using athlete-driven promotions. (conversionGoal)
// Event Promotion – Drive attendance or participation in a brand-sponsored event. (eventPromotion)
// Product Launch – Introduce a new product using athlete partnerships. (productLaunch)
// Content Creation – Develop authentic, high-quality marketing content with athletes. (contentDeliverables)
// Cause Marketing & CSR – Promote brand values through campaigns tied to social impact. (csrInitiative)

model Campaign {
  // Fields supplied by business
  name                String
  campaignSummary     String
  maxBudget           String
  compensation        Compensations
  studentAthleteCount Int
  sports              String[]
  startDate           DateTime
  endDate             DateTime

  // Fields generated by AI
  aiSummary           String
  objectives          String       // Description of campaign goals
  targetAudienceMin   Int
  targetAudienceMax   Int
  athleteIntegration  String
  channels            String
  timeline            String
  budgetBreakdown     String
  creativeConcept     String
  brandTone           String
  influencerAngle     String
  brandMentions       String
  metrics             String
  questions           String
  productLaunch       Boolean
  engagementGoal      Int?          // Target number of likes, shares, comments
  conversionGoal      Int?          // Number of expected sales/sign-ups
  impressionsGoal     Int?          // Projected reach (social media impressions)
  contentDeliverables String?       // List of content to be created (e.g., videos, posts)
  eventPromotion      Boolean      // Whether the campaign includes an event
  csrInitiative       Boolean      // Whether the campaign ties into social impact

  // Metadata
  id                  String   @id @default(uuid())
  status              String
  createdAt           DateTime @default(now())

  // 1-1 relationship: a Campaign can only belong to a single Business
  businessId          Int
  business            Business @relation(fields: [businessId], references: [id])

  // many-to-many relationship: a Campaign can have multiple StudentAthletes
  studentAthletes  StudentAthlete[] @relation("StudentAthleteCampaign")
}
